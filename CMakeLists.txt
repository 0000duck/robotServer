add_definitions("-DDLL_EXPORT")
cmake_minimum_required(VERSION 2.8.4)
project("My Project")

set(CMAKE_CXX_FLAGS "-std=c++11 -fPIC")
set(CMAKE_C_FLAGS "-std=c++11 -fPIC")

find_package(Threads)

IF (WIN32)
    MESSAGE(STATUS "Now is windows")
    include_directories(SystemLayer/WindowsAPI)
    add_subdirectory(SystemLayer/WindowsAPI)
ELSEIF (APPLE)
    MESSAGE(STATUS "Now is Apple systens.")
ELSEIF (UNIX)
    MESSAGE(STATUS "Now is UNIX-like OS's.")
    include_directories(SystemLayer/LinuxAPI)
    add_subdirectory(SystemLayer/LinuxAPI)
ENDIF ()

option (SIMULATION "SYSTEM FOR SIMULATION" OFF)
option (ETHERCAT "SYSTEM WITH ETHERCAT" OFF)
option (CANOPEN "SYSTEM WITH CANOPEN" OFF)
option (AXI "SYSTEM WITH ZYNQ AXI" ON)
option (RS485 "SYSTEM WITH RS485" OFF)

IF (SIMULATION)
    MESSAGE(STATUS "System for simulation")
    include_directories(LinkLayer/Simulation)
    add_subdirectory(LinkLayer/Simulation)
ELSEIF (ETHERCAT)
    MESSAGE(STATUS "System with EtherCAT")
    include_directories(LinkLayer/EtherCAT)
    add_subdirectory(LinkLayer/EtherCAT)
ELSEIF (CANOPEN)
    MESSAGE(STATUS "System with CANopen")
    include_directories(LinkLayer/CANopen)
    add_subdirectory(LinkLayer/CANopen)
ELSEIF (AXI)
    MESSAGE(STATUS "System with AXI")
    include_directories(LinkLayer/AXI)
    add_subdirectory(LinkLayer/AXI)
ELSEIF (RS485)
    MESSAGE(STATUS "System with RS485")
    include_directories(LinkLayer/RS485)
    add_subdirectory(LinkLayer/RS485)
ENDIF ()

include_directories(RobotClient)
add_subdirectory(RobotClient)
include_directories(RobotServer)
add_subdirectory(RobotServer)
include_directories(RobotInterpreter)
add_subdirectory(RobotInterpreter)
include_directories(RobotStructure)
add_subdirectory(RobotStructure)

IF (ARM_SYS)
	link_directories(/opt/zynq/libxml2-arm/lib)
ELSE ()
	find_package(LibXml2 REQUIRED)
	include_directories(${LIBXML2_INCLUDE_DIR})
ENDIF ()

#add_library(robotServerExe SHARED robotServerExe.cpp)
add_executable(robotServerExe robotServerExe.cpp)

target_link_libraries(robotServerExe RobotClient)
target_link_libraries(robotServerExe RobotServer)
target_link_libraries(robotServerExe RobotInterpreter)
target_link_libraries(robotServerExe RobotStructure)
target_link_libraries(robotServerExe SystemAPI)
target_link_libraries(robotServerExe RobotLink)
target_link_libraries(robotServerExe ${CMAKE_THREAD_LIBS_INIT})
